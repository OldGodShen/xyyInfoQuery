name: Tauri Release

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: windows-latest
        
    steps:
    - uses: actions/checkout@v4

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-

    - name: Cache bun dependencies
      uses: actions/cache@v3
      with:
        path: ~/.bun
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-

    - name: Install bun
      run: powershell -c "irm bun.sh/install.ps1 | iex"

    - name: Add bun to PATH
      run: echo "C:\Users\runneradmin\.bun\bin" >> $env:GITHUB_PATH

    - name: Verify bun installation
      run: bun --version

    - name: Install dependencies
      run: bun install

    - name: Cache Rust build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-

    - name: Cache Gradle files
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Install bun
      run: powershell -c "irm bun.sh/install.ps1 | iex"

    - name: Add bun to PATH
      run: echo "C:\Users\runneradmin\.bun\bin" >> $env:GITHUB_PATH

    - name: Verify bun installation
      run: bun --version

    - name: Install dependencies
      run: bun install

    - name: Install Rust Android Target
      run: rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install Android SDK
      uses: android-actions/setup-android@v3

    - name: Add Android SDK to PATH
      run: echo "$env:ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $env:GITHUB_PATH

    - name: Install Android dependencies
      run: sdkmanager "platforms;android-24" "build-tools;34.0.0" "ndk;26.3.11579264"

    - name: Add Android build-tools to PATH
      run: echo "$env:ANDROID_SDK_ROOT/build-tools/34.0.0" >> $env:GITHUB_PATH

    - name: Set up NDK_HOME environment variable
      run: echo "NDK_HOME=$env:ANDROID_SDK_ROOT/ndk/26.3.11579264" >> $env:GITHUB_ENV

    - name: Build for Windows
      run: |
        bun tauri build --verbose

    - name: Build Android APK
      run: |
        bun tauri android build --target aarch64 --verbose

    - name: Sign APK
      env:
        KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      shell: bash
      run: |
        echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > release.keystore

        zipalign -v 4 src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-unsigned.apk src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-aligned.apk

        apksigner.bat sign --ks release.keystore --ks-key-alias $KEY_ALIAS --ks-pass pass:$KEYSTORE_PASSWORD --out src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-signed.apk src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-aligned.apk

    - name: Extract version from package.json
      id: extract_version
      run: |
        $tauriconfJson = Get-Content -Raw -Path src-tauri\tauri.conf.json | ConvertFrom-Json
        $version = $tauriconfJson.version
        echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        release_name: Release v${{ env.VERSION }}
        draft: false
        prerelease: false

    - name: Upload MSI Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/xyyinfoquery_${{ env.VERSION }}_x64_zh-CN.msi
        asset_name: xyyinfoquery_${{ env.VERSION }}_x64_zh-CN.msi
        asset_content_type: application/octet-stream

    - name: Upload EXE Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/xyyinfoquery_${{ env.VERSION }}_x64-setup.exe
        asset_name: xyyinfoquery_${{ env.VERSION }}_x64-setup.exe
        asset_content_type: application/octet-stream

    - name: Upload APK Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-signed.apk
        asset_name: xyyinfoquery_${{ env.VERSION }}_arm64.apk
        asset_content_type: application/vnd.android.package-archive

    - name: Calculate Next Version
      id: calculate_version
      run: |
        $currentVersion = "${{ env.VERSION }}"
        $versionParts = $currentVersion.Split('.')
        $versionParts[2] = [int]$versionParts[2] + 1
        $newVersion = "$($versionParts[0]).$($versionParts[1]).$($versionParts[2])"
        echo "NEW_VERSION=$newVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

    - name: Update Version
      run: bun update-version.ts ${{ env.NEW_VERSION }}

    - name: Commit and Push Changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git checkout main
        git add package.json
        git add src-tauri/Cargo.toml
        git add src-tauri/tauri.conf.json
        git commit -m "Update version to v${{ env.NEW_VERSION }}"
        git push origin main